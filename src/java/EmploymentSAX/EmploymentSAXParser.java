package EmploymentSAX;


import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;

/**
 * ProfileBySAX uses a ContentHandler to write the profile to an XML File. The
 * ContantHandler is passed to objects of inner classes that extend from
 * DefaulHandler. These classes write elements and attributes to the
 * ContentHandler as events are generated by the SAX parser.
 *
 */
public class EmploymentSAXParser {


    String ssn = "8606261111";
    Employments employmentsElement = null;

    public EmploymentSAXParser(String ssn) {
        this.ssn = ssn;
        parse();
        //print();
        createFile("src/java/Xml/employmentsResult.xml");        
    }
    
        
    private void print() {
        System.out.println(employmentsElement);
    }

    public void parse() {

        try {
            // Create Parser
            SAXParserFactory saxpf = SAXParserFactory.newInstance();
            SAXParser saxp = saxpf.newSAXParser();

            saxp.parse("src/java/Xml/employmentrecords.xml", new MyParser(ssn));

        } catch (ParserConfigurationException | SAXException | IOException ex) {
            ex.printStackTrace();
        }
    }

    class MyParser extends DefaultHandler {

        List<Employment> employments = new ArrayList<>();
        Employment employment = null;

        private String ssn = null;
        private boolean foundSsn = false;
        private boolean record = false;
        private boolean getOrg = false;
        private boolean getStart = false;
        private boolean getEnd = false;

        //Constructor
        public MyParser(String ssn) {
            this.ssn = ssn;
        }

        @Override
        public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {

            if (foundSsn == true) {
                if (record == true) {
                    if (qName.equals("employment")) {
                        //System.out.println("<employment>");
                        employment = new Employment();
                    } else if (qName.equals("orgNumber")) {
                        //System.out.println("<orgNumber>");
                        getOrg = true;
                    } else if (qName.equals("startDate")) {
                        //System.out.println("<startDate>");
                        getStart = true;
                    } else if (qName.equals("endDate")) {
                        //System.out.println("<endDate>");
                        getEnd = true;
                    }
                } else if (qName.equals("employments")) {
                    record = true;
                    //System.out.println("<employments>");
                }
            }
        }

        @Override
        public void characters(char[] ch, int start, int length) throws SAXException {
            String string = new String(ch, start, length).trim();
            if (string.equals(ssn)) {
                foundSsn = true;
            }
            if (foundSsn == true && record == true) {
                if (getOrg == true) {
                    //System.out.println(string);
                    employment.setOrgNumber(string);
                } else if (getStart == true) {
                    //System.out.println(string);
                    employment.setStartDate(string);
                } else if (getEnd == true) {
                    //System.out.println(string);
                    employment.setEndDate(string);
                }
            }

        }

        @Override
        public void endElement(String uri, String localName, String qName) throws SAXException {
            
            if (qName.equals("employments") && foundSsn == true && record == true) {
                record = false;
                foundSsn = false;
                
                employmentsElement = new Employments();
                employmentsElement.setEmployments(employments);
                //System.out.println("</employments>");
            }
            if (foundSsn == true && record == true) {
                if (qName.equals("employment")) {
                    employments.add(employment);
                    //System.out.println("</employment>");
                } else if (qName.equals("orgNumber")) {
                    getOrg = false;
                    //System.out.println("</orgNumber>");
                } else if (qName.equals("startDate")) {
                    getStart = false;
                    //System.out.println("</startDate>");
                } else if (qName.equals("endDate")) {
                    getEnd = false;
                    //System.out.println("</endDate>");
                }
            }
        }

        @Override
        public void startDocument() throws SAXException {
            //System.out.println("<startDocument>");
        }

        @Override
        public void endDocument() throws SAXException {
            //System.out.println("<endDocument>");
        }
    }

    public Employments getEmployments() {
        return employmentsElement;
    }

    public void createFile(String fileName) {
        try {

            File file = new File(fileName);
            JAXBContext jaxbContextEmployment = JAXBContext.newInstance(Employments.class);
            Marshaller jaxbMarshaller = jaxbContextEmployment.createMarshaller();

            // output pretty printed
            jaxbMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);

            jaxbMarshaller.marshal(employmentsElement, file);
            jaxbMarshaller.marshal(employmentsElement, System.out);


        } catch (JAXBException e) {
            e.printStackTrace();
        }

    }

}
